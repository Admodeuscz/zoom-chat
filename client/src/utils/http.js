import axios from 'axios'
import { URL_LOGIN, URL_LOGOUT, URL_REFRESH_TOKEN, URL_REGISTER } from '../apis/auth.api'
import config from '../constants/config'
import HttpStatusCode from '../constants/httpStatusCode'
import {
  clearLS,
  getAccessTokenFromLS,
  getRefreshTokenFromLS,
  setAccessTokenToLS,
  setProfileToLS,
  setRefreshTokenToLS
} from './auth'
import { isAxiosExpiredTokenError, isAxiosUnauthorizedError } from './utils'

// Purchase: 1 - 3
// Me: 2 - 5
// Refresh Token cho purchase: 3 -  4
// G·ªçi l·∫°i Purchase: 4 - 6
// Refresh Token m·ªõi cho me: 5 - 6
// G·ªçi l·∫°i Me: 6

class Http {
  instance
  accessToken
  refreshToken
  refreshTokenRequest
  constructor() {
    this.accessToken = getAccessTokenFromLS()
    this.refreshToken = getRefreshTokenFromLS()
    this.refreshTokenRequest = null
    this.instance = axios.create({
      baseURL: config.baseUrl,
      timeout: 10000,
      headers: {
        'Content-Type': 'application/json'
      }
    })
    this.instance.interceptors.request.use(
      (config) => {
        if (this.accessToken && config.headers) {
          config.headers.authorization = `Bearer ${this.accessToken}`
          return config
        }
        return config
      },
      (error) => {
        return Promise.reject(error)
      }
    )
    // Add a response interceptor
    this.instance.interceptors.response.use(
      (response) => {
        const { url } = response.config
        if (url === URL_LOGIN || url === URL_REGISTER) {
          const data = response.data

          this.accessToken = data.data.access_token
          this.refreshToken = data.data.refresh_token
          setAccessTokenToLS(this.accessToken)
          setRefreshTokenToLS(this.refreshToken)
          setProfileToLS(data.data.operator)
        } else if (url === URL_LOGOUT) {
          this.accessToken = ''
          this.refreshToken = ''
          clearLS()
        }
        return response
      },
      (error) => {
        console.log('üöÄ ~ Http ~ constructor ~ error:', error)
        // Ch·ªâ toast l·ªói kh√¥ng ph·∫£i 422 v√† 401
        if (![HttpStatusCode.UnprocessableEntity, HttpStatusCode.Unauthorized].includes(error.response?.status)) {
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          const data = error.response?.data
          const message = data?.message || error.message
          Promise.reject(message)
        }

        // L·ªói Unauthorized (401) c√≥ r·∫•t nhi·ªÅu tr∆∞·ªùng h·ª£p
        // - Token kh√¥ng ƒë√∫ng
        // - Kh√¥ng truy·ªÅn token
        // - Token h·∫øt h·∫°n*

        // N·∫øu l√† l·ªói 401
        if (isAxiosUnauthorizedError(error)) {
          const config = error.response?.config || {}
          const { url } = config
          // Tr∆∞·ªùng h·ª£p Token h·∫øt h·∫°n v√† request ƒë√≥ kh√¥ng ph·∫£i l√† c·ªßa request refresh token
          // th√¨ ch√∫ng ta m·ªõi ti·∫øn h√†nh g·ªçi refresh token
          console.log(config)
          if (isAxiosExpiredTokenError(error) && url !== URL_REFRESH_TOKEN) {
            // H·∫°n ch·∫ø g·ªçi 2 l·∫ßn handleRefreshToken
            this.refreshTokenRequest = this.refreshTokenRequest
              ? this.refreshTokenRequest
              : this.handleRefreshToken().finally(() => {
                  // Gi·ªØ refreshTokenRequest trong 10s cho nh·ªØng request ti·∫øp theo n·∫øu c√≥ 401 th√¨ d√πng
                  setTimeout(() => {
                    this.refreshTokenRequest = null
                  }, 10000)
                })
            return this.refreshTokenRequest.then((access_token) => {
              // Nghƒ©a l√† ch√∫ng ta ti·∫øp t·ª•c g·ªçi l·∫°i request c≈© v·ª´a b·ªã l·ªói
              return this.instance({
                ...config,
                headers: { ...config.headers, authorization: access_token }
              })
            })
          }

          // C√≤n nh·ªØng tr∆∞·ªùng h·ª£p nh∆∞ token kh√¥ng ƒë√∫ng
          // kh√¥ng truy·ªÅn token,
          // token h·∫øt h·∫°n nh∆∞ng g·ªçi refresh token b·ªã fail
          // th√¨ ti·∫øn h√†nh x√≥a local storage v√† toast message

          clearLS()
          this.accessToken = ''
          this.refreshToken = ''
          Promise.reject(error.response?.data.data?.message || error.response?.data.message)
          // window.location.reload()
        }
        return Promise.reject(error)
      }
    )
  }
  async handleRefreshToken() {
    try {
      const res = await this.instance.post(URL_REFRESH_TOKEN, {
        refresh_token: this.refreshToken
      })
      const { access_token } = res.data.data
      setAccessTokenToLS(access_token)
      this.accessToken = access_token
      return access_token
    } catch (error) {
      clearLS()
      this.accessToken = ''
      this.refreshToken = ''
      Promise.reject(error)
    }
  }
}
const http = new Http().instance
export default http
